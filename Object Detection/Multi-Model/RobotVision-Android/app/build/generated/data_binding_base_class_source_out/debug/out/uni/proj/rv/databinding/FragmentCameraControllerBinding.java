// Generated by view binder compiler. Do not edit!
package uni.proj.rv.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.EditText;
import android.widget.ImageButton;
import android.widget.LinearLayout;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.appcompat.widget.AppCompatSeekBar;
import androidx.constraintlayout.widget.ConstraintLayout;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;
import uni.proj.rv.R;

public final class FragmentCameraControllerBinding implements ViewBinding {
  @NonNull
  private final ConstraintLayout rootView;

  @NonNull
  public final ConstraintLayout control;

  @NonNull
  public final EditText controlCommandInput;

  @NonNull
  public final ImageButton controlCommandSubmit;

  @NonNull
  public final ImageButton controlHsvAdd;

  @NonNull
  public final ImageButton controlHsvAuto;

  @NonNull
  public final LinearLayout controlHsvController;

  @NonNull
  public final AppCompatSeekBar controlHsvHFrom;

  @NonNull
  public final AppCompatSeekBar controlHsvHTo;

  @NonNull
  public final AppCompatSeekBar controlHsvSFrom;

  @NonNull
  public final AppCompatSeekBar controlHsvSTo;

  @NonNull
  public final AppCompatSeekBar controlHsvVFrom;

  @NonNull
  public final AppCompatSeekBar controlHsvVTo;

  @NonNull
  public final TextView controlPreviewName;

  @NonNull
  public final ImageButton controlPreviewNext;

  @NonNull
  public final LinearLayout controlSerial;

  @NonNull
  public final TextView controlSerialOutput;

  @NonNull
  public final ImageButton controlTogglePreview;

  @NonNull
  public final ImageButton controlToggleSerial;

  @NonNull
  public final ImageButton controlToggleTracking;

  @NonNull
  public final LinearLayout controlTracking;

  private FragmentCameraControllerBinding(@NonNull ConstraintLayout rootView,
      @NonNull ConstraintLayout control, @NonNull EditText controlCommandInput,
      @NonNull ImageButton controlCommandSubmit, @NonNull ImageButton controlHsvAdd,
      @NonNull ImageButton controlHsvAuto, @NonNull LinearLayout controlHsvController,
      @NonNull AppCompatSeekBar controlHsvHFrom, @NonNull AppCompatSeekBar controlHsvHTo,
      @NonNull AppCompatSeekBar controlHsvSFrom, @NonNull AppCompatSeekBar controlHsvSTo,
      @NonNull AppCompatSeekBar controlHsvVFrom, @NonNull AppCompatSeekBar controlHsvVTo,
      @NonNull TextView controlPreviewName, @NonNull ImageButton controlPreviewNext,
      @NonNull LinearLayout controlSerial, @NonNull TextView controlSerialOutput,
      @NonNull ImageButton controlTogglePreview, @NonNull ImageButton controlToggleSerial,
      @NonNull ImageButton controlToggleTracking, @NonNull LinearLayout controlTracking) {
    this.rootView = rootView;
    this.control = control;
    this.controlCommandInput = controlCommandInput;
    this.controlCommandSubmit = controlCommandSubmit;
    this.controlHsvAdd = controlHsvAdd;
    this.controlHsvAuto = controlHsvAuto;
    this.controlHsvController = controlHsvController;
    this.controlHsvHFrom = controlHsvHFrom;
    this.controlHsvHTo = controlHsvHTo;
    this.controlHsvSFrom = controlHsvSFrom;
    this.controlHsvSTo = controlHsvSTo;
    this.controlHsvVFrom = controlHsvVFrom;
    this.controlHsvVTo = controlHsvVTo;
    this.controlPreviewName = controlPreviewName;
    this.controlPreviewNext = controlPreviewNext;
    this.controlSerial = controlSerial;
    this.controlSerialOutput = controlSerialOutput;
    this.controlTogglePreview = controlTogglePreview;
    this.controlToggleSerial = controlToggleSerial;
    this.controlToggleTracking = controlToggleTracking;
    this.controlTracking = controlTracking;
  }

  @Override
  @NonNull
  public ConstraintLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static FragmentCameraControllerBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static FragmentCameraControllerBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.fragment_camera_controller, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static FragmentCameraControllerBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      ConstraintLayout control = (ConstraintLayout) rootView;

      id = R.id.control_command_input;
      EditText controlCommandInput = ViewBindings.findChildViewById(rootView, id);
      if (controlCommandInput == null) {
        break missingId;
      }

      id = R.id.control_command_submit;
      ImageButton controlCommandSubmit = ViewBindings.findChildViewById(rootView, id);
      if (controlCommandSubmit == null) {
        break missingId;
      }

      id = R.id.control_hsv_add;
      ImageButton controlHsvAdd = ViewBindings.findChildViewById(rootView, id);
      if (controlHsvAdd == null) {
        break missingId;
      }

      id = R.id.control_hsv_auto;
      ImageButton controlHsvAuto = ViewBindings.findChildViewById(rootView, id);
      if (controlHsvAuto == null) {
        break missingId;
      }

      id = R.id.control_hsv_controller;
      LinearLayout controlHsvController = ViewBindings.findChildViewById(rootView, id);
      if (controlHsvController == null) {
        break missingId;
      }

      id = R.id.control_hsv_h_from;
      AppCompatSeekBar controlHsvHFrom = ViewBindings.findChildViewById(rootView, id);
      if (controlHsvHFrom == null) {
        break missingId;
      }

      id = R.id.control_hsv_h_to;
      AppCompatSeekBar controlHsvHTo = ViewBindings.findChildViewById(rootView, id);
      if (controlHsvHTo == null) {
        break missingId;
      }

      id = R.id.control_hsv_s_from;
      AppCompatSeekBar controlHsvSFrom = ViewBindings.findChildViewById(rootView, id);
      if (controlHsvSFrom == null) {
        break missingId;
      }

      id = R.id.control_hsv_s_to;
      AppCompatSeekBar controlHsvSTo = ViewBindings.findChildViewById(rootView, id);
      if (controlHsvSTo == null) {
        break missingId;
      }

      id = R.id.control_hsv_v_from;
      AppCompatSeekBar controlHsvVFrom = ViewBindings.findChildViewById(rootView, id);
      if (controlHsvVFrom == null) {
        break missingId;
      }

      id = R.id.control_hsv_v_to;
      AppCompatSeekBar controlHsvVTo = ViewBindings.findChildViewById(rootView, id);
      if (controlHsvVTo == null) {
        break missingId;
      }

      id = R.id.control_preview_name;
      TextView controlPreviewName = ViewBindings.findChildViewById(rootView, id);
      if (controlPreviewName == null) {
        break missingId;
      }

      id = R.id.control_preview_next;
      ImageButton controlPreviewNext = ViewBindings.findChildViewById(rootView, id);
      if (controlPreviewNext == null) {
        break missingId;
      }

      id = R.id.control_serial;
      LinearLayout controlSerial = ViewBindings.findChildViewById(rootView, id);
      if (controlSerial == null) {
        break missingId;
      }

      id = R.id.control_serial_output;
      TextView controlSerialOutput = ViewBindings.findChildViewById(rootView, id);
      if (controlSerialOutput == null) {
        break missingId;
      }

      id = R.id.control_toggle_preview;
      ImageButton controlTogglePreview = ViewBindings.findChildViewById(rootView, id);
      if (controlTogglePreview == null) {
        break missingId;
      }

      id = R.id.control_toggle_serial;
      ImageButton controlToggleSerial = ViewBindings.findChildViewById(rootView, id);
      if (controlToggleSerial == null) {
        break missingId;
      }

      id = R.id.control_toggle_tracking;
      ImageButton controlToggleTracking = ViewBindings.findChildViewById(rootView, id);
      if (controlToggleTracking == null) {
        break missingId;
      }

      id = R.id.control_tracking;
      LinearLayout controlTracking = ViewBindings.findChildViewById(rootView, id);
      if (controlTracking == null) {
        break missingId;
      }

      return new FragmentCameraControllerBinding((ConstraintLayout) rootView, control,
          controlCommandInput, controlCommandSubmit, controlHsvAdd, controlHsvAuto,
          controlHsvController, controlHsvHFrom, controlHsvHTo, controlHsvSFrom, controlHsvSTo,
          controlHsvVFrom, controlHsvVTo, controlPreviewName, controlPreviewNext, controlSerial,
          controlSerialOutput, controlTogglePreview, controlToggleSerial, controlToggleTracking,
          controlTracking);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
